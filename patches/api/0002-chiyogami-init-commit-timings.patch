From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: bea4dev <bea0224@outlook.jp>
Date: Mon, 12 Jun 2023 18:10:05 +0900
Subject: [PATCH] chiyogami-init-commit-timings


diff --git a/src/main/java/co/aikar/timings/TimingHandler.java b/src/main/java/co/aikar/timings/TimingHandler.java
index 199789d56d22fcb1b77ebd56805cc28aa5a5ab0a..7cfc187f11a7453eea0ab6cad07aaeebbe264af0 100644
--- a/src/main/java/co/aikar/timings/TimingHandler.java
+++ b/src/main/java/co/aikar/timings/TimingHandler.java
@@ -28,34 +28,40 @@ import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 
 import java.util.ArrayDeque;
 import java.util.Deque;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentLinkedDeque;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
 import org.bukkit.Bukkit;
+import org.bukkit.World;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-class TimingHandler implements Timing {
+public class TimingHandler implements Timing {
 
-    private static AtomicInteger idPool = new AtomicInteger(1);
-    private static Deque<TimingHandler> TIMING_STACK = new ArrayDeque<>();
+    protected static AtomicInteger idPool = new AtomicInteger(1);
+    protected static Deque<TimingHandler> MAIN_THREAD_TIMING_STACK = new ArrayDeque<>();
+    protected static Map<Thread, Deque<TimingHandler>> WORLD_THREAD_TIMING_STACK = new ConcurrentHashMap<>();
+    protected static TimingHandler WORLD_PARENT_TIMING = null;
     final int id = idPool.getAndIncrement();
 
     final TimingIdentifier identifier;
-    private final boolean verbose;
+    protected final boolean verbose;
 
-    private final Int2ObjectOpenHashMap<TimingData> children = new LoadingIntMap<>(TimingData::new);
+    protected final Map<Integer, TimingData> children = new ConcurrentHashMap<>();
 
     final TimingData record;
-    private TimingHandler startParent;
-    private final TimingHandler groupHandler;
+    protected TimingHandler startParent;
+    protected final TimingHandler groupHandler;
 
-    private long start = 0;
-    private int timingDepth = 0;
-    private boolean added;
-    private boolean timed;
-    private boolean enabled;
+    protected long start = 0;
+    protected int timingDepth = 0;
+    protected boolean added;
+    protected boolean timed;
+    protected boolean enabled;
 
     TimingHandler(@NotNull TimingIdentifier id) {
         this.identifier = id;
@@ -67,6 +73,63 @@ class TimingHandler implements Timing {
         checkEnabled();
     }
 
+    public static class WorldTiming extends TimingHandler{
+
+        WorldTiming(@NotNull TimingIdentifier id) {
+            super(id);
+        }
+
+
+        @Override
+        @NotNull
+        public Timing startTiming() {
+            return startTiming(false);
+        }
+
+
+        @NotNull
+        public Timing startTiming(boolean parent) {
+            if (!enabled || !Bukkit.isPrimaryThread()) {
+                return this;
+            }
+
+            if(!Bukkit.isWorldThread()) return this;
+
+            Deque<TimingHandler> timingHandlers = WORLD_THREAD_TIMING_STACK.computeIfAbsent(Thread.currentThread(), k -> new ArrayDeque<>());
+            if (++timingDepth == 1) {
+                startParent = timingHandlers.peekLast();
+                if(parent){
+                    startParent = WORLD_PARENT_TIMING;
+                }
+                start = System.nanoTime();
+            }
+            timingHandlers.addLast(this);
+
+            return this;
+        }
+
+        @Override
+        public void stopTiming() {
+            if (!enabled || timingDepth <= 0 || start == 0 || !Bukkit.isPrimaryThread()) {
+                return;
+            }
+
+            if(!Bukkit.isWorldThread()) return;
+
+            popTimingStack();
+            if (--timingDepth == 0) {
+                addDiff(System.nanoTime() - start, startParent);
+                startParent = null;
+                start = 0;
+            }
+        }
+    }
+
+
+
+
+
+
     final void checkEnabled() {
         enabled = Timings.timingsEnabled && (!verbose || Timings.verboseEnabled);
     }
@@ -101,11 +164,15 @@ class TimingHandler implements Timing {
         if (!enabled || !Bukkit.isPrimaryThread()) {
             return this;
         }
-        if (++timingDepth == 1) {
-            startParent = TIMING_STACK.peekLast();
-            start = System.nanoTime();
+
+        if(!Bukkit.isWorldThread()){
+            if (++timingDepth == 1) {
+                startParent = MAIN_THREAD_TIMING_STACK.peekLast();
+                start = System.nanoTime();
+            }
+            MAIN_THREAD_TIMING_STACK.addLast(this);
         }
-        TIMING_STACK.addLast(this);
+
         return this;
     }
 
@@ -114,6 +181,8 @@ class TimingHandler implements Timing {
             return;
         }
 
+        if(Bukkit.isWorldThread()) return;
+
         popTimingStack();
         if (--timingDepth == 0) {
             addDiff(System.nanoTime() - start, startParent);
@@ -122,21 +191,50 @@ class TimingHandler implements Timing {
         }
     }
 
-    private void popTimingStack() {
+    public static synchronized void initializeWorldTiming(){
+        WORLD_PARENT_TIMING = MAIN_THREAD_TIMING_STACK.peekLast();
+    }
+
+    public static void clearWorldTimings(){
+        WORLD_THREAD_TIMING_STACK.clear();
+        WORLD_PARENT_TIMING = null;
+    }
+
+    protected void popTimingStack() {
         TimingHandler last;
-        while ((last = TIMING_STACK.removeLast()) != this) {
-            last.timingDepth = 0;
-            if ("Minecraft".equalsIgnoreCase(last.identifier.group)) {
-                Logger.getGlobal().log(Level.SEVERE, "TIMING_STACK_CORRUPTION - Look above this for any errors and report this to Paper unless it has a plugin in the stack trace (" + last.identifier + " did not stopTiming)");
-            } else {
-                Logger.getGlobal().log(Level.SEVERE, "TIMING_STACK_CORRUPTION - Report this to the plugin " + last.identifier.group + " (Look for errors above this in the logs) (" + last.identifier + " did not stopTiming)", new Throwable());
-            }
 
-            boolean found = TIMING_STACK.contains(this);
-            if (!found) {
-                // We aren't even in the stack... Don't pop everything
-                TIMING_STACK.addLast(last);
-                break;
+        if(!Bukkit.isWorldThread()) {
+            while ((last = MAIN_THREAD_TIMING_STACK.removeLast()) != this) {
+                last.timingDepth = 0;
+                if ("Minecraft".equalsIgnoreCase(last.identifier.group)) {
+                    Logger.getGlobal().log(Level.SEVERE, "TIMING_STACK_CORRUPTION - Look above this for any errors and report this to Paper unless it has a plugin in the stack trace (" + last.identifier + " did not stopTiming)");
+                } else {
+                    Logger.getGlobal().log(Level.SEVERE, "TIMING_STACK_CORRUPTION - Report this to the plugin " + last.identifier.group + " (Look for errors above this in the logs) (" + last.identifier + " did not stopTiming)", new Throwable());
+                }
+
+                boolean found = MAIN_THREAD_TIMING_STACK.contains(this);
+                if (!found) {
+                    // We aren't even in the stack... Don't pop everything
+                    MAIN_THREAD_TIMING_STACK.addLast(last);
+                    break;
+                }
+            }
+        } else {
+            Deque<TimingHandler> timingHandlers = WORLD_THREAD_TIMING_STACK.computeIfAbsent(Thread.currentThread(), k -> new ArrayDeque<>());
+            while ((last = timingHandlers.removeLast()) != this) {
+                last.timingDepth = 0;
+                if ("Minecraft".equalsIgnoreCase(last.identifier.group)) {
+                    Logger.getGlobal().log(Level.SEVERE, "TIMING_STACK_CORRUPTION - Look above this for any errors and report this to Paper unless it has a plugin in the stack trace (" + last.identifier + " did not stopTiming)");
+                } else {
+                    Logger.getGlobal().log(Level.SEVERE, "TIMING_STACK_CORRUPTION - Report this to the plugin " + last.identifier.group + " (Look for errors above this in the logs) (" + last.identifier + " did not stopTiming)", new Throwable());
+                }
+
+                boolean found = timingHandlers.contains(this);
+                if (!found) {
+                    // We aren't even in the stack... Don't pop everything
+                    timingHandlers.addLast(last);
+                    break;
+                }
             }
         }
     }
@@ -148,7 +246,7 @@ class TimingHandler implements Timing {
 
     void addDiff(long diff, @Nullable TimingHandler parent) {
         if (parent != null) {
-            parent.children.get(id).add(diff);
+            parent.children.computeIfAbsent(id, TimingData::new).add(diff);
         }
 
         record.add(diff);
@@ -159,7 +257,7 @@ class TimingHandler implements Timing {
         }
         if (groupHandler != null) {
             groupHandler.addDiff(diff, parent);
-            groupHandler.children.get(id).add(diff);
+            groupHandler.children.computeIfAbsent(id, TimingData::new).add(diff);
         }
     }
 
diff --git a/src/main/java/co/aikar/timings/Timings.java b/src/main/java/co/aikar/timings/Timings.java
index 9812d668ad945aba486fbf6d5bf83c4292cb5d03..61f06879559b6764e933859edca7a3063e412c8c 100644
--- a/src/main/java/co/aikar/timings/Timings.java
+++ b/src/main/java/co/aikar/timings/Timings.java
@@ -26,10 +26,6 @@ package co.aikar.timings;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.EvictingQueue;
 import com.google.common.collect.Lists;
-import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.event.ClickEvent;
-import net.kyori.adventure.text.format.TextColor;
-import net.kyori.adventure.text.serializer.plain.PlainTextComponentSerializer;
 import org.bukkit.Bukkit;
 import org.bukkit.command.CommandSender;
 import org.bukkit.plugin.Plugin;
@@ -40,10 +36,6 @@ import java.util.logging.Level;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-/**
- * @deprecated Timings will likely be replaced with Spark in the future
- */
-@Deprecated(forRemoval = true)
 @SuppressWarnings({"UnusedDeclaration", "WeakerAccess", "SameParameterValue"})
 public final class Timings {
 
@@ -54,7 +46,6 @@ public final class Timings {
     static boolean verboseEnabled = false;
     private static int historyInterval = -1;
     private static int historyLength = -1;
-    private static boolean warnedAboutDeprecationOnEnable;
 
     private Timings() {}
 
@@ -89,7 +80,6 @@ public final class Timings {
     @NotNull
     public static Timing of(@NotNull Plugin plugin, @NotNull String name, @Nullable Timing groupHandler) {
         Preconditions.checkNotNull(plugin, "Plugin can not be null");
-        Bukkit.getLogger().warning(String.format("Plugin '%s' is creating timing '%s' - this is deprecated behavior, please report it to the authors: %s", plugin.getName(), name, String.join(", ", plugin.getDescription().getAuthors())));
         return TimingsManager.getHandler(plugin.getName(), name, groupHandler);
     }
 
@@ -146,40 +136,9 @@ public final class Timings {
      */
     public static void setTimingsEnabled(boolean enabled) {
         timingsEnabled = enabled;
-        warnAboutDeprecationOnEnable();
         reset();
     }
 
-    private static void warnAboutDeprecationOnEnable() {
-        if (timingsEnabled && !warnedAboutDeprecationOnEnable) {
-            Bukkit.getLogger().warning(PlainTextComponentSerializer.plainText().serialize(deprecationMessage()));
-            warnedAboutDeprecationOnEnable = true;
-        }
-    }
-
-    public static Component deprecationMessage() {
-        return Component.text()
-            .color(TextColor.color(0xf3ef91))
-            .append(Component.text("[!] The timings profiler has been enabled but has been scheduled for removal from Paper in the future."))
-            .append(Component.newline())
-            .append(
-                Component.text("    We recommend installing the spark profiler as a replacement: ")
-                    .append(
-                        Component.text()
-                            .content("https://spark.lucko.me/")
-                            .clickEvent(ClickEvent.openUrl("https://spark.lucko.me/")))
-            )
-            .append(Component.newline())
-            .append(
-                Component.text("    For more information please visit: ")
-                    .append(
-                        Component.text()
-                            .content("https://github.com/PaperMC/Paper/issues/8948")
-                            .clickEvent(ClickEvent.openUrl("https://github.com/PaperMC/Paper/issues/8948")))
-            )
-            .build();
-    }
-
     /**
      * <p>Sets whether or not the Timings should monitor at Verbose level.</p>
      *
@@ -333,5 +292,28 @@ public final class Timings {
     static TimingHandler ofSafe(@Nullable String groupName, @NotNull String name, @Nullable Timing groupHandler) {
         return TimingsManager.getHandler(groupName, name, groupHandler);
     }
-}
 
+    @NotNull
+    static TimingHandler ofSafeForWorld(@NotNull String name) {
+        return ofSafeForWorld(null, name, null);
+    }
+
+    @NotNull
+    static Timing ofSafeForWorld(@Nullable Plugin plugin, @NotNull String name) {
+        Timing pluginHandler = null;
+        if (plugin != null) {
+            pluginHandler = ofSafeForWorld(plugin.getName(), "Combined Total", TimingsManager.PLUGIN_GROUP_HANDLER);
+        }
+        return ofSafeForWorld(plugin != null ? plugin.getName() : "Minecraft - Invalid Plugin", name, pluginHandler);
+    }
+
+    @NotNull
+    static TimingHandler ofSafeForWorld(@NotNull String name, @Nullable Timing groupHandler) {
+        return ofSafeForWorld(null, name, groupHandler);
+    }
+
+    @NotNull
+    static TimingHandler ofSafeForWorld(@Nullable String groupName, @NotNull String name, @Nullable Timing groupHandler) {
+        return TimingsManager.getHandlerForWorld(groupName, name, groupHandler);
+    }
+}
diff --git a/src/main/java/co/aikar/timings/TimingsManager.java b/src/main/java/co/aikar/timings/TimingsManager.java
index 5e1558ca3ffeeaf2645fa003965474a442d650bf..8fa5625410b68644e520a2db87a83e4bce5a30b0 100644
--- a/src/main/java/co/aikar/timings/TimingsManager.java
+++ b/src/main/java/co/aikar/timings/TimingsManager.java
@@ -44,9 +44,7 @@ import org.jetbrains.annotations.Nullable;
  */
 @Deprecated(forRemoval = true)
 public final class TimingsManager {
-    static final Map<TimingIdentifier, TimingHandler> TIMING_MAP = LoadingMap.of(
-        new ConcurrentHashMap<>(4096, .5F), TimingHandler::new
-    );
+    static final Map<TimingIdentifier, TimingHandler> TIMING_MAP = new ConcurrentHashMap<>(4096, .5F);
     public static final FullServerTickHandler FULL_SERVER_TICK = new FullServerTickHandler();
     public static final TimingHandler TIMINGS_TICK = Timings.ofSafe("Timings Tick", FULL_SERVER_TICK);
     public static final Timing PLUGIN_GROUP_HANDLER = Timings.ofSafe("Plugins");
@@ -136,7 +134,12 @@ public final class TimingsManager {
 
     @NotNull
     static TimingHandler getHandler(@Nullable String group, @NotNull String name, @Nullable Timing parent) {
-        return TIMING_MAP.get(new TimingIdentifier(group, name, parent));
+        return TIMING_MAP.computeIfAbsent(new TimingIdentifier(group, name, parent), TimingHandler::new);
+    }
+
+    @NotNull
+    static TimingHandler getHandlerForWorld(@Nullable String group, @NotNull String name, @Nullable Timing parent) {
+        return TIMING_MAP.computeIfAbsent(new TimingIdentifier(group, name, parent), TimingHandler.WorldTiming::new);
     }
 
 
